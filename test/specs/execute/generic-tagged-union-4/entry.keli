Result.ok(A Type) fail(B Type) = tags.
    case(ok.value(A))
    case(fail.with(B))

{A Type} {B Type} {C Type}
(this Result.ok(A) fail(B)).then(f Function.in(A) out(C))
    | Result.ok(C) fail(B)
    = this.
        case(ok.value(v)):
            (Result.ok.value(f.apply(v)))
        case(fail.with(error)):
            (Result.fail.with(error))

Boolean = tags.
    case(true) 
    case(false) 

(x Int).==(y Int) = ffi.javascript("$x === $y ? $Boolean.$true : $Boolean.$false").as(Boolean)

(this Int).isZero | Result.ok(Int) fail(String) = 
    this.==(0).
        case(true):
            (Result.ok.value(0))
        case(false):
            (Result.fail.with("Not a zero"))
            
= 123.isZero
= 0.isZero 
